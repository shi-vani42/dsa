*** Method 1 ***
vector<int> reverse(vector<int>v)
{
    int s=0;
    int e=v.size()-1;
    while(s<e)
    {
        swap(v[s++],v[e--]);
    }
    return v;
}
vector<int> findArraySum(vector<int>&a, int n, vector<int>&b, int m) {
	int i=n-1,j=m-1;
    vector<int>ans;
    int carry=0;
    while(i>=0 && j>=0)
    {
        int val1=a[i];
        int val2=b[j];
        int sum=val1+val2+carry;
        carry=sum/10;
        sum=sum%10;
        ans.push_back(sum);
        i--;
        j--;
    }
    while(i>=0)
    {
        int sum=a[i]+carry;
        carry=sum/10;
        sum=sum%10;
        ans.push_back(sum);
        i--;
    }
     while(j>=0)
    {
        int sum=b[j]+carry;
        carry=sum/10;
        sum=sum%10;
        ans.push_back(sum);
        j--;
    }
    while(carry!=0)
    {
        int sum=carry;
        carry=sum/10;
        sum=sum%10;
        ans.push_back(sum);
    }
    return reverse(ans);
 }
*** Method 2 ***
 vector<int> reverse(vector<int>v){

   int s = 0;

   int e = v.size()-1;

   while(s<e){

       swap(v[s] , v[e]);

       s++;

       e--;

   }    

   return v;

}

vector<int> findArraySum(vector<int>&a, int n, vector<int>&b, int m) {

vector<int>ans;

   int mul=1,i,j,res1=0,res2=0;

   for(int i=n-1;i>=0;i--){

       res1 = res1 + (a[i]*mul);

       mul=mul*10;

   }

   mul=1;

   for(int i=m-1;i>=0;i--){

       res2 = res2 + (b[i]*mul);

       mul=mul*10;

   }

   int total = res1+res2;

   while(total > 0){

       int ele = total % 10;

       ans.push_back(ele);

       total = total / 10;

   }

   return reverse(ans);

}
