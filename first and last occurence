int firstoc(vector<int>arr,int n,int key)
{
     int l=0,h=n-1;
     int ans=-1;
     int mid=l+(h-l)/2;
     while(l<=h)
     {
        if(arr[mid]==key)
       { ans=mid;
        h=mid-1;}
        else if(key>arr[mid])
            l=mid+1;
        else if(key<arr[mid])
        h=mid-1;
         mid=l+(h-l)/2;
     }
     return ans;
}
int lastoc(vector<int>arr,int n,int key)
{
     int l=0,h=n-1;
     int ans=-1;
     int mid=l+(h-l)/2;
     while(l<=h)
     {
        if(arr[mid]==key)
       { ans=mid;
        l=mid+1;}
        else if(key>arr[mid])
        l=mid+1;
        else if(key<arr[mid])
        h=mid-1;
        mid=l+(h-l)/2;
     }
     return ans;
}
class Solution
{
    public:
    vector<int> searchRange(vector<int>& nums, int target) {
        pair<int,int>p;
        vector<int> res;
        int n=nums.size();
        p.first=firstoc(nums,n,target);
        p.second=lastoc(nums,n,target);
        res.push_back(p.first);
        res.push_back(p.second);
        return res;
    }
};
